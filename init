#!/usr/bin/env bash
# Simply symlink all files to $HOME - optionally create backups of any existing files
TIMESTAMP=$(date "+%Y%m%d.%H%M")
BAK_SUFFIX="$TIMESTAMP.bak"
CONFIG_FILES=".gitconfig .emacs .erlang .erlang.d .gitignore .inputrc .profile .sbtconfig .tmux.conf .scripts"

function display_help() {
    echo "Usage: link-to-home [-b|--backup]"
    exit 1
}

function backup_conflicts() {
    echo "** Beginning to backup any conflicting files in \$HOME **"
    for f in $@
    do
	OLD=$HOME/$f
	if [[ -f $OLD || -d $OLD ]]; then
	    NEW=$OLD$BAK_SUFFIX
	    echo "Found a conflict for $f; backed up as $NEW"
	    mv $OLD $NEW
	fi
    done
}

function link_files() {
    DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    for f in $@
    do
	ln -ihvs $DIR/$f $HOME/$f
    done
    for header in webmachine/include/*.hrl
    do
	cp -i $header .erlang.d/include
    done
}

function compilation() {
    command -v erlc > /dev/null 2>&1 || { echo "setup requires erlang to be available" >&2; exit 1; }
    erlc -o $HOME/.erlang.d/ $HOME/.erlang.d/user_default.erl
}

if [[ -z $HOME ]]; then
    echo "No \$HOME var set. Aborting..."
    exit 1
fi

if [[ $1 ]]; then
    case $1 in
	-b)       backup_conflicts $CONFIG_FILES ;;
	--backup) backup_conflicts $CONFIG_FILES ;;
	*)        display_help                   ;;
    esac
fi

echo "** Grabbing submodules **"
git submodule -q init
git submodule -q update
echo "** Proceeding to create symlinks for the new dot-files in \$HOME **"
link_files $CONFIG_FILES
echo "** Finished creating symlinks **"
echo "** Proceeding to compile included Erlang modules **"
compilation
echo "** Finished compiling Erlang modules **"
echo "** Exiting **"
